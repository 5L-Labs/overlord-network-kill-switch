[
  {
    "id": "8a44f6ee5126dadc",
    "type": "tab",
    "label": "DNS",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "caa4cd33a29af8e6",
    "type": "mqtt in",
    "z": "8a44f6ee5126dadc",
    "name": "Media Change",
    "topic": "cmnd/dns_controller/media/+/change",
    "qos": "2",
    "datatype": "auto",
    "broker": "44ad9994.7afd",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 120,
    "y": 120,
    "wires": [["f8baa0e728fcffa6"]]
  },
  {
    "id": "d801cd64df39a731",
    "type": "debug",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 240,
    "wires": []
  },
  {
    "id": "9136b9ba2ceeaf98",
    "type": "http request",
    "z": "8a44f6ee5126dadc",
    "name": "WebServer",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 550,
    "y": 120,
    "wires": [["b82786f78dbdb8b9", "d801cd64df39a731"]]
  },
  {
    "id": "5f2a033f8739bd4e",
    "type": "mqtt out",
    "z": "8a44f6ee5126dadc",
    "name": "Publish",
    "topic": "",
    "qos": "2",
    "retain": "false",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "44ad9994.7afd",
    "x": 900,
    "y": 120,
    "wires": []
  },
  {
    "id": "f8baa0e728fcffa6",
    "type": "rbe",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "payload",
    "topi": "topic",
    "x": 290,
    "y": 120,
    "wires": [["eef5d17a36f78509"]]
  },
  {
    "id": "f2bf547fc050a016",
    "type": "function",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "let webserver = flow.get('endpoint');\n// Which node\n\nif (!([\"status\", \"change\"].includes(msg.verb)) || msg.target == \"\") {\n    node.warn(`ignoring ${msg.verb}`)\n    return [null, msg]\n}\n\nmsg.topic = `stat/dns_controller/media/${msg.target}/status`\nmsg.url = `${webserver}/pihole/${msg.verb}/${msg.target}`\n\nif (msg.verb == \"status\"){\n    msg.method = \"GET\"\n}\nelse if (msg.verb == \"change\")\n{\n    msg.method = \"POST\"\n    if (msg.payload == \"true\") msg.verb = \"enable\"\n    if (msg.payload == \"false\") msg.verb = \"disable\"\n    msg.url = `${webserver}/pihole/${msg.verb}/${msg.target}`\n}\n\nreturn msg;\n\n\n\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 180,
    "wires": [["d801cd64df39a731", "9136b9ba2ceeaf98"]]
  },
  {
    "id": "64c43542f1606f12",
    "type": "mqtt in",
    "z": "8a44f6ee5126dadc",
    "name": "Media Status",
    "topic": "stat/dns_controller/media/+/status",
    "qos": "2",
    "datatype": "auto",
    "broker": "44ad9994.7afd",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 110,
    "y": 260,
    "wires": [["104bbaa3c21039cb"]]
  },
  {
    "id": "104bbaa3c21039cb",
    "type": "rbe",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "payload",
    "topi": "topic",
    "x": 270,
    "y": 260,
    "wires": [["eef5d17a36f78509"]]
  },
  {
    "id": "b82786f78dbdb8b9",
    "type": "change",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload.status",
        "tot": "msg",
        "dc": true
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 740,
    "y": 120,
    "wires": [["5f2a033f8739bd4e", "eb1d48c75325c949"]]
  },
  {
    "id": "99c8f9bf27f438e8",
    "type": "mqtt in",
    "z": "8a44f6ee5126dadc",
    "name": "Master Control Change",
    "topic": "cmnd/dns_controller/master/+",
    "qos": "2",
    "datatype": "auto",
    "broker": "44ad9994.7afd",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 120,
    "y": 500,
    "wires": [["7a253c90b9a925e5"]]
  },
  {
    "id": "e15f60cd737b56a3",
    "type": "http request",
    "z": "8a44f6ee5126dadc",
    "name": "WebServer",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 790,
    "y": 520,
    "wires": [["d463172eccce26fa", "1c70348aae6011a6"]]
  },
  {
    "id": "0e8d714da15bb434",
    "type": "mqtt out",
    "z": "8a44f6ee5126dadc",
    "name": "Publish",
    "topic": "",
    "qos": "2",
    "retain": "true",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "44ad9994.7afd",
    "x": 1260,
    "y": 520,
    "wires": []
  },
  {
    "id": "7a253c90b9a925e5",
    "type": "rbe",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "payload",
    "topi": "topic",
    "x": 270,
    "y": 500,
    "wires": [["1b1d2d6b610f1596"]]
  },
  {
    "id": "53d8609db4b811ee",
    "type": "function",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "let webserver = flow.get('endpoint');\n\n// Which node\nif (!msg.topic.includes(\"change\")){\n    node.warn(`Ignoring ${msg.topic}`)\n    return [null, msg]\n}\nlet jl = msg.topic.split('/')\nlet disable_type = jl[3]\n// dns_controller/master/short_disable\"\nnode.warn(`Looking at ${jl[3]}`)\nvar method =\"\"\n// OFF (Send to WebServer)\nlet intent = msg.payload\nlet timer = null;\nif (jl[2]=='short_change') timer = 300;\n\nif (intent == \"true\"){\n  msg.method = \"POST\";\n  method=\"disable\";\n} \nif (intent == \"false\") {\n    msg.method = \"DELETE\"\n    method=\"enable\";\n}\nmsg.intent = intent\nmsg.topic = `stat/dns_controller/master/status`\nlet temp = ''\nif (timer != null) temp = `?timer=${timer}`\nmsg.url = `${webserver}/alldns/${temp}`\nnode.warn(`calling user ${msg.url} with method ${msg.method}`)\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 500,
    "wires": [["e15f60cd737b56a3", "1c70348aae6011a6"]]
  },
  {
    "id": "0458cf219bbe8371",
    "type": "mqtt in",
    "z": "8a44f6ee5126dadc",
    "name": "Master Status",
    "topic": "stat/dns_controller/master/status",
    "qos": "2",
    "datatype": "auto",
    "broker": "44ad9994.7afd",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 700,
    "wires": [["7a8470bdfd48f69e"]]
  },
  {
    "id": "7a8470bdfd48f69e",
    "type": "rbe",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "payload",
    "topi": "topic",
    "x": 250,
    "y": 720,
    "wires": [["27b4033312442b98"]]
  },
  {
    "id": "30c9b4c0f3d75591",
    "type": "function",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "let webserver = flow.get('endpoint');\nlet jl = msg.topic.split('/')\nlet service = jl[3]\nnode.warn(`Getting Status of Looking at ${service}`)\n\n// OFF (Send to WebServer)\nlet intent = msg.payload\n\nmsg.intent = intent\nmsg.method = \"GET\"\nmsg.topic = `stat/dns_controller/master/status`\nmsg.url = `${webserver}/alldns/`\nnode.warn(`calling user ${msg.url}`)\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 720,
    "wires": [["e15f60cd737b56a3", "1c70348aae6011a6"]]
  },
  {
    "id": "d463172eccce26fa",
    "type": "change",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload.status",
        "tot": "msg",
        "dc": true
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1020,
    "y": 520,
    "wires": [["0e8d714da15bb434", "eb1d48c75325c949"]]
  },
  {
    "id": "8a1c889ddc523e4c",
    "type": "mqtt in",
    "z": "8a44f6ee5126dadc",
    "name": "Router Change",
    "topic": "cmnd/router_controller/change_rule/+",
    "qos": "2",
    "datatype": "auto",
    "broker": "44ad9994.7afd",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 100,
    "y": 900,
    "wires": [["4f9af4f16f17cb98"]]
  },
  {
    "id": "1c70348aae6011a6",
    "type": "debug",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 770,
    "y": 700,
    "wires": []
  },
  {
    "id": "686120c80d7b96c9",
    "type": "http request",
    "z": "8a44f6ee5126dadc",
    "name": "WebServer",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 850,
    "y": 880,
    "wires": [["90e3198802bdc38a", "d71c76f6897412d3"]]
  },
  {
    "id": "7861d40440285110",
    "type": "mqtt out",
    "z": "8a44f6ee5126dadc",
    "name": "Publish",
    "topic": "",
    "qos": "2",
    "retain": "false",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "44ad9994.7afd",
    "x": 1540,
    "y": 1060,
    "wires": []
  },
  {
    "id": "4f9af4f16f17cb98",
    "type": "rbe",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "payload",
    "topi": "topic",
    "x": 230,
    "y": 960,
    "wires": [["f0bd60e6496e3721"]]
  },
  {
    "id": "de40f7116f0940db",
    "type": "function",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "let webserver = flow.get('endpoint');\n// Which node\n// Bail on anything empty or not change for this path\nif (!([\"status_rule\",\"status_device\",\"change_device\",\"change_rule\"].includes(msg.verb)) || msg.target == \"\"){\n   node.warn(`ignoring ${msg.verb}`)\n    return [null, msg]\n}\n\nvar router_path=\"\"\n\nmsg.method = \"GET\";\nif (msg.verb.includes(\"status\"))\n{\n  router_path = msg.verb\n  msg.payload =\"\"\n  node.warn(`status ${msg.verb}`)\n}\nelse if (msg.verb == \"change_device\")\n{\n  // OFF (Send to WebServer)\n  let intent = msg.payload\n  var method \n  if (intent == \"offline\"){\n    router_path=\"disable_device\";\n  } \n  if (intent == \"online\") {\n      router_path=\"enable_device\";\n  }\n}\nelse if (msg.verb == \"change_rule\") {\n  // OFF (Send to WebServer)\n  let intent = msg.payload\n  var method\n  if (intent == \"false\") {\n    router_path = \"disable_rule\";\n  }\n  if (intent == \"true\") {\n    router_path = \"enable_rule\";\n  }\n}\nelse {\n  return null;\n}\nmsg.url = `${webserver}/ubiquiti/${router_path}/${msg.target}`\nmsg.topic = `stat/router_controller/status/${msg.target}`\nnode.warn(`Looking at ${msg.verb} vs ${router_path} for ${msg.target} at ${msg.topic}`)\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 880,
    "wires": [["686120c80d7b96c9", "d71c76f6897412d3"]]
  },
  {
    "id": "858642375224804a",
    "type": "mqtt in",
    "z": "8a44f6ee5126dadc",
    "name": "Router Status",
    "topic": "stat/router_controller/status_rule/+",
    "qos": "2",
    "datatype": "auto",
    "broker": "44ad9994.7afd",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 1040,
    "wires": [["4f9af4f16f17cb98"]]
  },
  {
    "id": "f0bd60e6496e3721",
    "type": "change",
    "z": "8a44f6ee5126dadc",
    "name": "Common Parsing",
    "rules": [
      {
        "t": "set",
        "p": "target",
        "pt": "msg",
        "to": "$split(topic, \"/\")[3]",
        "tot": "jsonata"
      },
      {
        "t": "set",
        "p": "verb",
        "pt": "msg",
        "to": "$split(topic, \"/\")[2]",
        "tot": "jsonata"
      },
      {
        "t": "set",
        "p": "endpoint",
        "pt": "flow",
        "to": "http://XXXX:19000",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 390,
    "y": 960,
    "wires": [["de40f7116f0940db"]]
  },
  {
    "id": "eef5d17a36f78509",
    "type": "change",
    "z": "8a44f6ee5126dadc",
    "name": "Common Parsing",
    "rules": [
      {
        "t": "set",
        "p": "target",
        "pt": "msg",
        "to": "$split(topic, \"/\")[3]",
        "tot": "jsonata"
      },
      {
        "t": "set",
        "p": "verb",
        "pt": "msg",
        "to": "$split(topic, \"/\")[4]",
        "tot": "jsonata"
      },
      {
        "t": "set",
        "p": "endpoint",
        "pt": "flow",
        "to": "http://XXXX:19000",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 290,
    "y": 200,
    "wires": [["f2bf547fc050a016"]]
  },
  {
    "id": "e2bffb8fdc17ad70",
    "type": "function",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "func": "\nif (msg.statusCode == 200)\n{\n  node.warn(`HTTP Response of Payload ${msg.payload.status}`)\n}\n\nreturn {\"payload\": msg.payload.status,\n  \"topic\": `stat/router_controller/status_rule/${msg.target}`};\n\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1120,
    "y": 880,
    "wires": [["7861d40440285110", "eb1d48c75325c949"]]
  },
  {
    "id": "90e3198802bdc38a",
    "type": "delay",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "pauseType": "delay",
    "timeout": "1",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 1000,
    "y": 960,
    "wires": [["e2bffb8fdc17ad70"]]
  },
  {
    "id": "d71c76f6897412d3",
    "type": "debug",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 1000,
    "wires": []
  },
  {
    "id": "eb1d48c75325c949",
    "type": "debug",
    "z": "8a44f6ee5126dadc",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1770,
    "y": 640,
    "wires": []
  },
  {
    "id": "1b1d2d6b610f1596",
    "type": "change",
    "z": "8a44f6ee5126dadc",
    "name": "Common Parsing",
    "rules": [
      {
        "t": "set",
        "p": "endpoint",
        "pt": "flow",
        "to": "http://XXXX:19000",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 430,
    "y": 500,
    "wires": [["53d8609db4b811ee"]]
  },
  {
    "id": "27b4033312442b98",
    "type": "change",
    "z": "8a44f6ee5126dadc",
    "name": "Common Parsing",
    "rules": [
      {
        "t": "set",
        "p": "endpoint",
        "pt": "flow",
        "to": "http://XXXX:19000",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 370,
    "y": 800,
    "wires": [["30c9b4c0f3d75591"]]
  },
  {
    "id": "44ad9994.7afd",
    "type": "mqtt-broker",
    "name": "The Mothership",
    "broker": "192.168.100.104",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "nodered",
    "birthQos": "0",
    "birthPayload": "cheese",
    "birthMsg": {},
    "closeTopic": "nodered",
    "closeQos": "0",
    "closePayload": "cheese2",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  }
]
